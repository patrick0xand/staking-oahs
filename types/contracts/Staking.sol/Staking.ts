/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface StakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TIME"
      | "claim"
      | "drainToken"
      | "emergencyTokenRetrieve"
      | "getEarnedRewardTokens"
      | "getRewardTokenBalance"
      | "getUnlockTime"
      | "initialize"
      | "initializeV1"
      | "newStake"
      | "owner"
      | "paidOahReward"
      | "pause"
      | "paused"
      | "poolLength"
      | "proxiableUUID"
      | "renounceOwnership"
      | "rewardToken"
      | "set"
      | "setRewardToken"
      | "setStakes"
      | "sets"
      | "stakes"
      | "totalBnbStaking"
      | "totalEthStaking"
      | "totalOahStaking"
      | "totalUsdtStaking"
      | "transferOwnership"
      | "unpause"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userAccumulatedRewards"
      | "userClaimableRewards"
      | "userStakes"
      | "userTotalRewards"
      | "withdraw"
      | "withdrawables"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "DevWithdraw"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "RewardTokenChanged"
      | "Unpaused"
      | "Upgraded"
      | "UserClaimed"
      | "UserStaked"
      | "UserWithdrew"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_TIME", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "drainToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTokenRetrieve",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarnedRewardTokens",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockTime",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV1",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paidOahReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sets",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBnbStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalEthStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOahStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsdtStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userAccumulatedRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaimableRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawables",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_TIME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drainToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTokenRetrieve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarnedRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paidOahReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBnbStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEthStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOahStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUsdtStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAccumulatedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawables",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DevWithdrawEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardTokenChangedEvent {
  export type InputTuple = [
    oldRewardToken: AddressLike,
    returnedAmount: BigNumberish,
    newRewardToken: AddressLike
  ];
  export type OutputTuple = [
    oldRewardToken: string,
    returnedAmount: bigint,
    newRewardToken: string
  ];
  export interface OutputObject {
    oldRewardToken: string;
    returnedAmount: bigint;
    newRewardToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserClaimedEvent {
  export type InputTuple = [
    id: BigNumberish,
    wallet: AddressLike,
    rewardToken: AddressLike,
    claimedAmount: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    wallet: string,
    rewardToken: string,
    claimedAmount: bigint
  ];
  export interface OutputObject {
    id: bigint;
    wallet: string;
    rewardToken: string;
    claimedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserStakedEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, pid: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserWithdrewEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, pid: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Staking extends BaseContract {
  connect(runner?: ContractRunner | null): Staking;
  waitForDeployment(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TIME: TypedContractMethod<[], [bigint], "view">;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  drainToken: TypedContractMethod<
    [_to: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyTokenRetrieve: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getEarnedRewardTokens: TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;

  getRewardTokenBalance: TypedContractMethod<[], [bigint], "view">;

  getUnlockTime: TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_owner: AddressLike, _oahToken: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeV1: TypedContractMethod<
    [usdt: AddressLike, eth: AddressLike],
    [void],
    "nonpayable"
  >;

  newStake: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paidOahReward: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardToken: TypedContractMethod<[], [string], "view">;

  set: TypedContractMethod<
    [_pid: BigNumberish, _convertRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardToken: TypedContractMethod<
    [newRewardToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setStakes: TypedContractMethod<
    [_period: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  sets: TypedContractMethod<
    [_pids: BigNumberish[], _convertRates: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  stakes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        stakeToken: string;
        convertRate: bigint;
        lockTimePeriod: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  totalBnbStaking: TypedContractMethod<[], [bigint], "view">;

  totalEthStaking: TypedContractMethod<[], [bigint], "view">;

  totalOahStaking: TypedContractMethod<[], [bigint], "view">;

  totalUsdtStaking: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userAccumulatedRewards: TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;

  userClaimableRewards: TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;

  userStakes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        stakeAmount: bigint;
        startDate: bigint;
        accumulatedRewards: bigint;
        withdrawTime: bigint;
      }
    ],
    "view"
  >;

  userTotalRewards: TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawables: TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { withdrawAmount: bigint; maxWithdrawAmount: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "drainToken"
  ): TypedContractMethod<
    [_to: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyTokenRetrieve"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEarnedRewardTokens"
  ): TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnlockTime"
  ): TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_owner: AddressLike, _oahToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeV1"
  ): TypedContractMethod<
    [usdt: AddressLike, eth: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "newStake"
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paidOahReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "poolLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "set"
  ): TypedContractMethod<
    [_pid: BigNumberish, _convertRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardToken"
  ): TypedContractMethod<[newRewardToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakes"
  ): TypedContractMethod<
    [_period: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sets"
  ): TypedContractMethod<
    [_pids: BigNumberish[], _convertRates: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        stakeToken: string;
        convertRate: bigint;
        lockTimePeriod: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalBnbStaking"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalEthStaking"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalOahStaking"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsdtStaking"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userAccumulatedRewards"
  ): TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userClaimableRewards"
  ): TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "userStakes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        stakeAmount: bigint;
        startDate: bigint;
        accumulatedRewards: bigint;
        withdrawTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTotalRewards"
  ): TypedContractMethod<
    [_pid: BigNumberish, _staker: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawables"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[bigint, bigint] & { withdrawAmount: bigint; maxWithdrawAmount: bigint }],
    "view"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "DevWithdraw"
  ): TypedContractEvent<
    DevWithdrawEvent.InputTuple,
    DevWithdrawEvent.OutputTuple,
    DevWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RewardTokenChanged"
  ): TypedContractEvent<
    RewardTokenChangedEvent.InputTuple,
    RewardTokenChangedEvent.OutputTuple,
    RewardTokenChangedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "UserClaimed"
  ): TypedContractEvent<
    UserClaimedEvent.InputTuple,
    UserClaimedEvent.OutputTuple,
    UserClaimedEvent.OutputObject
  >;
  getEvent(
    key: "UserStaked"
  ): TypedContractEvent<
    UserStakedEvent.InputTuple,
    UserStakedEvent.OutputTuple,
    UserStakedEvent.OutputObject
  >;
  getEvent(
    key: "UserWithdrew"
  ): TypedContractEvent<
    UserWithdrewEvent.InputTuple,
    UserWithdrewEvent.OutputTuple,
    UserWithdrewEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "DevWithdraw(address,uint256)": TypedContractEvent<
      DevWithdrawEvent.InputTuple,
      DevWithdrawEvent.OutputTuple,
      DevWithdrawEvent.OutputObject
    >;
    DevWithdraw: TypedContractEvent<
      DevWithdrawEvent.InputTuple,
      DevWithdrawEvent.OutputTuple,
      DevWithdrawEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RewardTokenChanged(address,uint256,address)": TypedContractEvent<
      RewardTokenChangedEvent.InputTuple,
      RewardTokenChangedEvent.OutputTuple,
      RewardTokenChangedEvent.OutputObject
    >;
    RewardTokenChanged: TypedContractEvent<
      RewardTokenChangedEvent.InputTuple,
      RewardTokenChangedEvent.OutputTuple,
      RewardTokenChangedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "UserClaimed(uint256,address,address,uint256)": TypedContractEvent<
      UserClaimedEvent.InputTuple,
      UserClaimedEvent.OutputTuple,
      UserClaimedEvent.OutputObject
    >;
    UserClaimed: TypedContractEvent<
      UserClaimedEvent.InputTuple,
      UserClaimedEvent.OutputTuple,
      UserClaimedEvent.OutputObject
    >;

    "UserStaked(address,uint256,uint256)": TypedContractEvent<
      UserStakedEvent.InputTuple,
      UserStakedEvent.OutputTuple,
      UserStakedEvent.OutputObject
    >;
    UserStaked: TypedContractEvent<
      UserStakedEvent.InputTuple,
      UserStakedEvent.OutputTuple,
      UserStakedEvent.OutputObject
    >;

    "UserWithdrew(address,uint256,uint256)": TypedContractEvent<
      UserWithdrewEvent.InputTuple,
      UserWithdrewEvent.OutputTuple,
      UserWithdrewEvent.OutputObject
    >;
    UserWithdrew: TypedContractEvent<
      UserWithdrewEvent.InputTuple,
      UserWithdrewEvent.OutputTuple,
      UserWithdrewEvent.OutputObject
    >;
  };
}
