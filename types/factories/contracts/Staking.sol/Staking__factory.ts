/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Staking,
  StakingInterface,
} from "../../../contracts/Staking.sol/Staking";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "convertRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestRate",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Storage.Stake[]",
        name: "_stakes",
        type: "tuple[]",
      },
    ],
    name: "StakesChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "claimedAmount",
        type: "uint256",
      },
    ],
    name: "UserClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "receiveAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestWithdrew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "withdrawTime",
            type: "uint256",
          },
          {
            internalType: "enum Storage.Period",
            name: "period",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "completed",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Storage.UserStake",
        name: "_userStake",
        type: "tuple",
      },
    ],
    name: "UserStaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "receiveAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestWithdrew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "withdrawTime",
            type: "uint256",
          },
          {
            internalType: "enum Storage.Period",
            name: "period",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "completed",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Storage.UserStake",
        name: "_userStake",
        type: "tuple",
      },
    ],
    name: "UserWithdrew",
    type: "event",
  },
  {
    inputs: [],
    name: "OahToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Storage.Period",
        name: "period",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "calculateTotalInterest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "claimMinute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_oahToken",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "enum Storage.Period",
        name: "_period",
        type: "uint8",
      },
    ],
    name: "newStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "convertRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestRate",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        internalType: "struct Storage.Stake[]",
        name: "_stake",
        type: "tuple[]",
      },
    ],
    name: "setStakes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "convertRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "receiveAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestWithdrew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawTime",
        type: "uint256",
      },
      {
        internalType: "enum Storage.Period",
        name: "period",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "completed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e1565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100df576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6080516123a8610118600039600081816105ac015281816105ec01528181610bd201528181610c120152610ca501526123a86000f3fe6080604052600436106101145760003560e01c8063642cdfe3116100a05780638456cb59116100645780638456cb59146103115780638da5cb5b1461032657806391547b6b146103445780639239a75014610357578063f2fde38b146103f457600080fd5b8063642cdfe3146102705780636abd06f4146102a95780636e6b4f41146102bc578063715018a6146102dc5780638375a40b146102f157600080fd5b80633f4ba83a116100e75780633f4ba83a146101e2578063485cc955146101f75780634f1ef2861461021757806352d1902d1461022a5780635c975abb1461024d57600080fd5b806316934fc4146101195780632e1a7d4d1461019a5780633659cfe6146101af578063379607f5146101cf575b600080fd5b34801561012557600080fd5b506101696101343660046119c7565b6101046020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b039095168552602085019390935291830152151560608201526080015b60405180910390f35b6101ad6101a83660046119e2565b610414565b005b3480156101bb57600080fd5b506101ad6101ca3660046119c7565b6105a2565b6101ad6101dd3660046119e2565b610681565b3480156101ee57600080fd5b506101ad6108c1565b34801561020357600080fd5b506101ad6102123660046119fb565b6108d3565b6101ad610225366004611a75565b610bc8565b34801561023657600080fd5b5061023f610c98565b604051908152602001610191565b34801561025957600080fd5b5060655460ff166040519015158152602001610191565b34801561027c57600080fd5b5061010754610291906001600160a01b031681565b6040516001600160a01b039091168152602001610191565b6101ad6102b73660046119e2565b610d4b565b3480156102c857600080fd5b506101ad6102d7366004611b1b565b610e49565b3480156102e857600080fd5b506101ad610f28565b3480156102fd57600080fd5b5061023f61030c366004611b9f565b610f3a565b34801561031d57600080fd5b506101ad610fb8565b34801561033257600080fd5b506033546001600160a01b0316610291565b6101ad610352366004611bd2565b610fc8565b34801561036357600080fd5b506103dd6103723660046119e2565b6101056020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460088901546009909901546001600160a01b0398891699979098169795969495939492939192909160ff808216916101009004168b565b6040516101919b9a99989796959493929190611c46565b34801561040057600080fd5b506101ad61040f3660046119c7565b6112ee565b600081815261010560205260409020600981015460fe90610100900460ff161561045a5760405162461bcd60e51b81526004016104519190611cf2565b60405180910390fd5b50805460ff906001600160a01b031633146104885760405162461bcd60e51b81526004016104519190611cf2565b5060018101546001600160a01b03166104d1576002810154604051339180156108fc02916000818181858888f193505050501580156104cb573d6000803e3d6000fd5b50610553565b6001810154600282015460405163a9059cbb60e01b815233600482015260248101919091526001600160a01b0390911690819063a9059cbb906044016020604051808303816000875af115801561052c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105509190611d90565b50505b60098101805461ff0019166101001790556040517fb8f994c88794ab4c57f06e9d9b437293b8095179151064779d7f8085a9afba75906105969084908490611db4565b60405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105ea5760405162461bcd60e51b815260040161045190611e5a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661063360008051602061232c833981519152546001600160a01b031690565b6001600160a01b0316146106595760405162461bcd60e51b815260040161045190611ea6565b61066281611364565b6040805160008082526020820190925261067e9183919061136c565b50565b600081815261010560205260409020600981015460fe90610100900460ff16156106be5760405162461bcd60e51b81526004016104519190611cf2565b50805460ff906001600160a01b031633146106ec5760405162461bcd60e51b81526004016104519190611cf2565b508060050154816007015410610101906107195760405162461bcd60e51b81526004016104519190611cf2565b5060008160080154610103548360060154426107359190611f08565b61073f9190611f1b565b6107499190611f08565b90506101008161076c5760405162461bcd60e51b81526004016104519190611cf2565b5060006101025461016d6107809190611f3d565b836004015484600301546107949190611f3d565b61079e9190611f1b565b905060006107ac8383611f3d565b90506000846007015485600501546107c49190611f08565b9050808211156107d2578091505b6101075460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b0390911690819063a9059cbb906044016020604051808303816000875af1158015610826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084a9190611d90565b508486600801600082825461085f9190611f54565b925050819055508286600701600082825461087a9190611f54565b909155505060408051888152602081018590527fa98c9cd6f37cc9f5640e5ede35299d831f3fde3145d46bcce1e84366d30b5e21910160405180910390a150505050505050565b6108c96114d7565b6108d1611531565b565b600054610100900460ff16158080156108f35750600054600160ff909116105b8061090d5750303b15801561090d575060005460ff166001145b6109705760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610451565b6000805460ff191660011790558015610993576000805461ff0019166101001790555b61099b611583565b6109a36115b2565b60006101065561010780546001600160a01b0319166001600160a01b0384161790556109ce836112ee565b60408051808201909152601281527108aa4a4be929cac82989288be988a9c8ea8960731b602082015260fb90610a049082611fb7565b506040805180820190915260148152734552525f5354414b455f4e4f545f41435449564560601b602082015260fc90610a3d9082611fb7565b5060408051808201909152601c81527f4552525f494e56414c49445f4e45575f5354414b455f414d4f554e5400000000602082015260fd90610a7f9082611fb7565b5060408051808201909152601881527f4552525f555345525f5354414b455f434f4d504c455445440000000000000000602082015260fe90610ac19082611fb7565b5060408051808201909152601c81527f4552525f494e56414c49445f555345525f5354414b455f4f574e455200000000602082015260ff90610b039082611fb7565b5060408051808201909152601b81527f4552525f4e4f5f494e5445524553545f544f5f57495448445241570000000000602082015261010090610b469082611fb7565b5060405180606001604052806022815260200161230a6022913961010190610b6e9082611fb7565b5060646101025562015180610103558015610bc3576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c105760405162461bcd60e51b815260040161045190611e5a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c5960008051602061232c833981519152546001600160a01b031690565b6001600160a01b031614610c7f5760405162461bcd60e51b815260040161045190611ea6565b610c8882611364565b610c948282600161136c565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d385760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610451565b5060008051602061232c83398151915290565b600081815261010560205260409020600981015460fe90610100900460ff1615610d885760405162461bcd60e51b81526004016104519190611cf2565b50805460ff906001600160a01b03163314610db65760405162461bcd60e51b81526004016104519190611cf2565b50806005015481600701541061010190610de35760405162461bcd60e51b81526004016104519190611cf2565b5060008160080154603c836006015442610dfd9190611f08565b610e079190611f1b565b610e119190611f08565b905061010081610e345760405162461bcd60e51b81526004016104519190611cf2565b50600061010254620805206107809190611f3d565b610e516114d7565b60005b81811015610ef6576000838383818110610e7057610e70612077565b905060800201803603810190610e86919061208d565b80516001600160a01b0390811660009081526101046020908152604091829020845181546001600160a01b03191694169390931783558301516001808401919091559083015160028301556060909201516003909101805460ff1916911515919091179055919091019050610e54565b507fac79de3ad6302b39186e8b01b1a0e88b9292fc4b3a569a4b7164d3203ab1293982826040516105969291906120fe565b610f306114d7565b6108d160006115e1565b600060076001856002811115610f5257610f52611c0e565b03610f5f5750601e610f7c565b6002856002811115610f7357610f73611c0e565b03610f7c5750603c5b600061010254618e94610f8f9190611f3d565b85610f9a8487611f3d565b610fa49190611f3d565b610fae9190611f1b565b9695505050505050565b610fc06114d7565b6108d1611633565b610fd0611670565b6001600160a01b03808416600090815261010460209081526040918290208251608081018452815490941684526001810154918401919091526002810154918301919091526003015460ff1615156060820181905260fc906110455760405162461bcd60e51b81526004016104519190611cf2565b5080516001600160a01b038116156110d4576040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b038216906323b872dd906064016020604051808303816000875af11580156110aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ce9190611d90565b506110f8565b60fd3485146110f65760405162461bcd60e51b81526004016104519190611cf2565b505b60006101025485846020015161110e9190611f3d565b6111189190611f1b565b9050600061112b85856040015188610f3a565b6101068054919250600091908261114183612175565b9190505590506000604051806101600160405280336001600160a01b0316815260200187600001516001600160a01b031681526020018981526020018760400151815260200185815260200184815260200142815260200160008152602001600081526020018860028111156111b9576111b9611c0e565b8152600060209182018190528481526101058252604090819020835181546001600160a01b039182166001600160a01b03199182161783559385015160018381018054929093169190951617905590830151600280830191909155606084015160038301556080840151600483015560a0840151600583015560c0840151600683015560e084015160078301556101008401516008830155610120840151600983018054959650869593949193909260ff199091169190849081111561128157611281611c0e565b02179055506101409190910151600990910180549115156101000261ff00199092169190911790556040517f9bc3a5f4ac8d7889ae0ee4b7b2b4ea3e3cc3480016f8823835634fbcff65ade6906112db908490849061218e565b60405180910390a1505050505050505050565b6112f66114d7565b6001600160a01b03811661135b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610451565b61067e816115e1565b61067e6114d7565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561139f57610bc3836116b6565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156113f9575060408051601f3d908101601f191682019092526113f691810190612232565b60015b61145c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610451565b60008051602061232c83398151915281146114cb5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610451565b50610bc3838383611752565b6033546001600160a01b031633146108d15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610451565b61153961177d565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff166115aa5760405162461bcd60e51b81526004016104519061224b565b6108d16117c6565b600054610100900460ff166115d95760405162461bcd60e51b81526004016104519061224b565b6108d16117f6565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61163b611670565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115663390565b60655460ff16156108d15760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610451565b6001600160a01b0381163b6117235760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610451565b60008051602061232c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61175b83611829565b6000825111806117685750805b15610bc3576117778383611869565b50505050565b60655460ff166108d15760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610451565b600054610100900460ff166117ed5760405162461bcd60e51b81526004016104519061224b565b6108d1336115e1565b600054610100900460ff1661181d5760405162461bcd60e51b81526004016104519061224b565b6065805460ff19169055565b611832816116b6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061188e838360405180606001604052806027815260200161234c60279139611897565b90505b92915050565b6060600080856001600160a01b0316856040516118b491906122ba565b600060405180830381855af49150503d80600081146118ef576040519150601f19603f3d011682016040523d82523d6000602084013e6118f4565b606091505b5091509150610fae868383876060831561196f578251600003611968576001600160a01b0385163b6119685760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610451565b5081611979565b6119798383611981565b949350505050565b8151156119915781518083602001fd5b8060405162461bcd60e51b815260040161045191906122d6565b80356001600160a01b03811681146119c257600080fd5b919050565b6000602082840312156119d957600080fd5b61188e826119ab565b6000602082840312156119f457600080fd5b5035919050565b60008060408385031215611a0e57600080fd5b611a17836119ab565b9150611a25602084016119ab565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6d57611a6d611a2e565b604052919050565b60008060408385031215611a8857600080fd5b611a91836119ab565b915060208084013567ffffffffffffffff80821115611aaf57600080fd5b818601915086601f830112611ac357600080fd5b813581811115611ad557611ad5611a2e565b611ae7601f8201601f19168501611a44565b91508082528784828501011115611afd57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060208385031215611b2e57600080fd5b823567ffffffffffffffff80821115611b4657600080fd5b818501915085601f830112611b5a57600080fd5b813581811115611b6957600080fd5b8660208260071b8501011115611b7e57600080fd5b60209290920196919550909350505050565b8035600381106119c257600080fd5b600080600060608486031215611bb457600080fd5b611bbd84611b90565b95602085013595506040909401359392505050565b600080600060608486031215611be757600080fd5b611bf0846119ab565b925060208401359150611c0560408501611b90565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b60038110611c4257634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b038c811682528b166020820152604081018a9052606081018990526080810188905260a0810187905260c0810186905260e0810185905261010081018490526101608101611c9f610120830185611c24565b8215156101408301529c9b505050505050505050505050565b600181811c90821680611ccc57607f821691505b602082108103611cec57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602080835260008454611d0681611cb8565b8060208701526040600180841660008114611d285760018114611d4457611d74565b60ff19851660408a0152604084151560051b8a01019550611d74565b89600052602060002060005b85811015611d6b5781548b8201860152908301908801611d50565b8a016040019650505b509398975050505050505050565b801515811461067e57600080fd5b600060208284031215611da257600080fd5b8151611dad81611d82565b9392505050565b82815281546001600160a01b03166020820152610180810160018301546001600160a01b031660408301526002830154606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e0830152600783015461010083015260088301546101208301526009830154611e3d610140840160ff8316611c24565b611e52610160840160ff8360081c1615159052565b509392505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561189157611891611ef2565b600082611f3857634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761189157611891611ef2565b8082018082111561189157611891611ef2565b601f821115610bc3576000816000526020600020601f850160051c81016020861015611f905750805b601f850160051c820191505b81811015611faf57828155600101611f9c565b505050505050565b815167ffffffffffffffff811115611fd157611fd1611a2e565b611fe581611fdf8454611cb8565b84611f67565b602080601f83116001811461201a57600084156120025750858301515b600019600386901b1c1916600185901b178555611faf565b600085815260208120601f198616915b828110156120495788860151825594840194600190910190840161202a565b50858210156120675787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b60006080828403121561209f57600080fd5b6040516080810181811067ffffffffffffffff821117156120c2576120c2611a2e565b6040526120ce836119ab565b8152602083013560208201526040830135604082015260608301356120f281611d82565b60608201529392505050565b6020808252818101839052600090604080840186845b87811015612168576001600160a01b0361212d836119ab565b1683528482013585840152838201358484015260608083013561214f81611d82565b1515908401526080928301929190910190600101612114565b5090979650505050505050565b60006001820161218757612187611ef2565b5060010190565b82815281516001600160a01b03166020820152610180810160208301516001600160a01b0381166040840152506040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e083015161010081818501528085015191505061012081818501528085015191505061014061221f81850183611c24565b8401518015156101608501529050611e52565b60006020828403121561224457600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b838110156122b1578181015183820152602001612299565b50506000910152565b600082516122cc818460208701612296565b9190910192915050565b60208152600082518060208401526122f5816040850160208701612296565b601f01601f1916919091016040019291505056fe4552525f494e5445524553545f544f5f57495448445241575f434f4d504c45544544360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220707a4124c832269623cc436cb7f56d1fa0df592c74a01b289b37ee60e1ba10ea64736f6c63430008190033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Staking & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Staking__factory {
    return super.connect(runner) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new Interface(_abi) as StakingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Staking {
    return new Contract(address, _abi, runner) as unknown as Staking;
  }
}
