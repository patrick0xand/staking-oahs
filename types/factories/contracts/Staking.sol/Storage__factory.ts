/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Storage,
  StorageInterface,
} from "../../../contracts/Staking.sol/Storage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldRewardToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "returnedAmount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newRewardToken",
        type: "address",
      },
    ],
    name: "RewardTokenChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "claimedAmount",
        type: "uint256",
      },
    ],
    name: "UserClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "UserStaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "UserWithdrew",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_TIME",
    outputs: [
      {
        internalType: "uint48",
        name: "",
        type: "uint48",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "convertRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lockTimePeriod",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "accumulatedRewards",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506104238061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632694998414610051578063d5a44f861461006f578063e8990524146100a2578063f7c618c1146100d5575b600080fd5b6100596100f3565b60405161006691906101ee565b60405180910390f35b61008960048036038101906100849190610244565b6100fd565b60405161009994939291906102dc565b60405180910390f35b6100bc60048036038101906100b7919061034d565b61016a565b6040516100cc949392919061038d565b60405180910390f35b6100dd6101a7565b6040516100ea91906103d2565b60405180910390f35b65ffffffffffff81565b6003818154811061010d57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900460ff16905084565b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154905084565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600065ffffffffffff82169050919050565b6101e8816101cd565b82525050565b600060208201905061020360008301846101df565b92915050565b600080fd5b6000819050919050565b6102218161020e565b811461022c57600080fd5b50565b60008135905061023e81610218565b92915050565b60006020828403121561025a57610259610209565b5b60006102688482850161022f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061029c82610271565b9050919050565b6102ac81610291565b82525050565b6102bb8161020e565b82525050565b60008115159050919050565b6102d6816102c1565b82525050565b60006080820190506102f160008301876102a3565b6102fe60208301866102b2565b61030b60408301856102b2565b61031860608301846102cd565b95945050505050565b61032a81610291565b811461033557600080fd5b50565b60008135905061034781610321565b92915050565b6000806040838503121561036457610363610209565b5b60006103728582860161022f565b925050602061038385828601610338565b9150509250929050565b60006080820190506103a260008301876102b2565b6103af60208301866102b2565b6103bc60408301856102b2565b6103c960608301846102b2565b95945050505050565b60006020820190506103e760008301846102a3565b9291505056fea26469706673582212208ddfb4b1398ed2b8267f491959e8e685dac803aae77b96894b015a6d7603cf1b64736f6c63430008190033";

type StorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Storage__factory extends ContractFactory {
  constructor(...args: StorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Storage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Storage__factory {
    return super.connect(runner) as Storage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageInterface {
    return new Interface(_abi) as StorageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Storage {
    return new Contract(address, _abi, runner) as unknown as Storage;
  }
}
