/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Storage,
  StorageInterface,
} from "../../../contracts/Staking.sol/Storage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "convertRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestRate",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isActive",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Storage.Stake[]",
        name: "_stakes",
        type: "tuple[]",
      },
    ],
    name: "StakesChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "claimedAmount",
        type: "uint256",
      },
    ],
    name: "UserClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "receiveAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestWithdrew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "withdrawTime",
            type: "uint256",
          },
          {
            internalType: "enum Storage.Period",
            name: "period",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "completed",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Storage.UserStake",
        name: "_userStake",
        type: "tuple",
      },
    ],
    name: "UserStaked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "stakeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestRate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "receiveAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "interestWithdrew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "withdrawTime",
            type: "uint256",
          },
          {
            internalType: "enum Storage.Period",
            name: "period",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "completed",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Storage.UserStake",
        name: "_userStake",
        type: "tuple",
      },
    ],
    name: "UserWithdrew",
    type: "event",
  },
  {
    inputs: [],
    name: "OahToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Storage.Period",
        name: "period",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "calculateTotalInterest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakes",
    outputs: [
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "convertRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "stakeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "receiveAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interestWithdrew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawTime",
        type: "uint256",
      },
      {
        internalType: "enum Storage.Period",
        name: "period",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "completed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506103c68061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316934fc414610051578063642cdfe3146100c45780638375a40b146100ef5780639239a75014610110575b600080fd5b61009361005f36600461021c565b60096020526000908152604090208054600182015460028301546003909301546001600160a01b0390921692909160ff1684565b604080516001600160a01b039095168552602085019390935291830152151560608201526080015b60405180910390f35b600c546100d7906001600160a01b031681565b6040516001600160a01b0390911681526020016100bb565b6101026100fd36600461024c565b61019f565b6040519081526020016100bb565b61018861011e366004610285565b600a6020526000908152604090208054600182015460028301546003840154600485015460058601546006870154600788015460088901546009909901546001600160a01b0398891699979098169795969495939492939192909160ff808216916101009004168b565b6040516100bb9b9a999897969594939291906102b4565b6000600760018560028111156101b7576101b761029e565b036101c45750601e6101e1565b60028560028111156101d8576101d861029e565b036101e15750603c5b6000600754618e946101f39190610343565b856101fe8487610343565b6102089190610343565b610212919061036e565b9695505050505050565b60006020828403121561022e57600080fd5b81356001600160a01b038116811461024557600080fd5b9392505050565b60008060006060848603121561026157600080fd5b83356003811061027057600080fd5b95602085013595506040909401359392505050565b60006020828403121561029757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038c811682528b166020820152604081018a9052606081018990526080810188905260a0810187905260c0810186905260e08101859052610100810184905261016081016003841061031d57634e487b7160e01b600052602160045260246000fd5b8361012083015261033361014083018415159052565b9c9b505050505050505050505050565b808202811582820484141761036857634e487b7160e01b600052601160045260246000fd5b92915050565b60008261038b57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205025a78ad39b7dc6b5920fd62a59ea199d1236b4457aaa6cd7efaae2a54905b064736f6c63430008190033";

type StorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Storage__factory extends ContractFactory {
  constructor(...args: StorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Storage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Storage__factory {
    return super.connect(runner) as Storage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StorageInterface {
    return new Interface(_abi) as StorageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Storage {
    return new Contract(address, _abi, runner) as unknown as Storage;
  }
}
